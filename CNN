# machine-learning
机器学习实例
import tensorflow as tf#手写数字辨识CNN
from tensorflow.examples.tutorials.mnist import input_data
mnist=input_data.read_data_sets('MNIST_data',one_hot=True)
def compute_accruacy(v_xs,v_ys):#计算准确率
    global prediction
    y_pre=sess.run(prediction,feed_dict={xs:v_xs, keep_prob: 1})
    correct_predicttion=tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_predicttion,tf.float32))
    result=sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys,keep_prob:1})
    return  result
def weight_variable(shape):#初始化权重
    initial=tf.truncated_normal(shape,stddev=0.1)
    return tf.Variable(initial)
def bias_variable(shape):#赋予bias 0.1
    initial=tf.constant(0.1,shape=shape)
    return tf.Variable(initial)
def conv2d(x,W):#二维的卷积函数，x和y方向上移动步长都为1，选择的数据的方式为不抛弃
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')
def max_pool_2x2(x):#池化的核函数大小为2x2，x和y方向上移动步长都为2
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')
xs=tf.placeholder(tf.float32,[None,784])#28*28
ys=tf.placeholder(tf.float32,[None,10])
keep_prob=tf.placeholder(tf.float32)#定义dropout的采取率
x_image=tf.reshape(xs,[-1,28,28,1])#-1代表不考虑输入的图片维度，我们要把数据变成28*28格式，1代表一种基色（因为我们是黑白图片）
#第一层卷积
W_conv1=weight_variable([5,5,1,32])#卷积核patch的大小是5x5，输入高度为1，输出为32
b_conv1=bias_variable([32])#输出长度为32
h_conv1=tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1)#二维卷积 特征提取
h_pool1=max_pool_2x2(h_conv1)#max pooling
#第二层卷积
W_conv2=weight_variable([5,5,32,64])#输出高度为32，输出为64
b_conv2=bias_variable([64])#输出长度为64
h_conv2=tf.nn.relu(conv2d(h_pool1,W_conv2)+b_conv2)
h_pool2=max_pool_2x2(h_conv2)
#全连接层第一层
W_fc1=weight_variable([7*7*64,1024])
b_fc1=bias_variable([1024])
h_pool2_flat=tf.reshape(h_pool2,[-1,7*7*64])#把数据平铺成一维
h_fc1=tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1)+b_fc1)#进行线性运算，relu处理
h_fc1_drop=tf.nn.dropout(h_fc1,keep_prob)#dropout
#全连接层第二层
W_fc2=weight_variable([1024,10])
b_fc2=bias_variable([10])
prediction=tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2)+b_fc2)#计算出预测值
cross_entropy=tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),
                    reduction_indices=[1]))#根据真实值和预测值的误差计算出loss 交叉熵
train_step=tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)#用Adam进行training
sess=tf.Session()
init=tf.global_variables_initializer()
sess.run(init)
for i in  range(1000):
    batch_xs,batch_ys=mnist.train.next_batch(100)
    sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys,keep_prob:0.5})
    if i%50==0:
        print(compute_accruacy(mnist.test.images[:1000],mnist.test.labels[:1000]))#取mnist.test内前1000数据来训练
